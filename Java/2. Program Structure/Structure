C program to print Hello world

#include<stdio.h>
#include<conio.h>
void main(){
    clrscr();
        printf("Hello world");
    getch();
}

C++ program to print Hello world

#include<iostream.h>
#include<conio.h>
void main(){
    clrscr();
        cout<<"Hello world";
    getch();
}

Structure of Java Program
-------------------------

Line 1 : class Hello
Line 2 : {
Line 3 :     public static void main(String args[])
Line 4 :     {
Line 5 :         System.out.println("Hello world");
Line 6 :     }
Line 7 : }

Line 1 Explanation : class Hello

|-- class is a keyword
|-- class is a userdefined blueprint for creating object
|-- we define class name in pascal case
|-- Hello is a userdefined class name 
|-- By convension, we keep first letter of class name in uppercase

Line 2 : {

|-- It simply represents the opening of class definition part

Line 3 : public static void main(String args[])

|-- public is a keyword
|-- It is also a access modifier(public, private, protected, default) but its mandatory to write public only here
|-- Why public ? Because JVM(Java Virtual Machine) can call it from anywhere.

|-- static is also a keyword
|-- Along with this it is a modifier (static, synchronized, abstract, final etc) but its mandatory to write static only here.
|-- If we make any method as a static, then in that case we do not needs to create object of that class to call that static method, static methods are directly called by class name. 
Note : static methods (static member functions) are class member functions.

|-- public static <return_type>
    public static void : here void means it does not return anything

|-- main : main is predefined word
|-- (String args[])
    |-- Here String is a class 
    |-- args[] is a String array name(user defined name)
    |-- String arr[] valid
    |-- String args[] represents command line arguments, which is responsible for taking arguments for main method at run time.

    Note : 
        String args[], here args is an array
        String []args, here args is an array
        String[] args, here args is an array
        String...args, here args is an array
        |-- three dots represents varargs (variable arguments)

    Note:
        String name[],salary;
            here name is an array and salary is a variable   
        String []name,salary;
            here name is an array and salary is a variable   
        String[] name,salary;
            here name and salary both are array   

Line 4 : {

|-- It simply represents the opening of main function definition part

Line 5 : System.out.println("Hello world");

|-- Here System is a class 
    We cannot create object of System class in our class.
    Why ? Because there is a private constructor inside System class, which restrict it to create object in any other class.

|-- Here out is object
    class System{
        static PrintStream out;
        ....
        ....
    }
    Here out is the object of PrintStream class
    and static member of System class.

|-- Here println is a function of PrintStream class

    class PrintStream{
        public void println(String s){
            ....
        }
        public void print(String s){
            ....
        }
        public void println(int i){
            ....
        }
        public void print(int i){
            ....
        }
        ....
        ....
    }

Line 6 :     }
|-- closing of main function definition part

Line 7 : }
|-- closing of class definition part 

save : Filename.java 
compile : javac Filename.java
run : java classname 

Note : 
class Hello{}

In this case, file name and class name can be same or different

save : Hello.java (filename) 
classname : Hello 

save : MyExample.java (filename) 
classname : Hello 

But in this case : 
public class Hello{}

In this case, file name and class name must be same.

save : Hello.java (filename) 
classname : Hello 

---------------------------------

Why Java ? 
Need of Java
Types of Application which we can create with the help of java : 

1. Desktop application | Window based application | Standalone application
Technology used : Swing and AWT (Abstract Windowing Toolkit)

2. Web application : Application which runs on the browser and whose execution takes place on the server. It basically follows client server architecture. 
Technology used : Servlet, JSP , Framework like Hibernate, spring, spring boot etc.
Web application uses web server. 

3. Enterprise Application : Application which are distributed in nature. 
Enterprise application uses application server.
Technology Used : EJB (Enterprise Java Beans)

4. Mobile Application : 
5. Games
6. Embedded system 
7. Robotics 
8. Big data hadoop

Features : 
----------
1. Simple
2. Easy to understand
3. Portable 
4. Machine Independent 
5. Secure 
6. Robust
7. Object Oriented
8. Automatic Memory management
9. Performance
